// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: filesystem.proto

package filesystem

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileManage_CreateFile_FullMethodName        = "/pb.FileManage/CreateFile"
	FileManage_CreateDynamicFile_FullMethodName = "/pb.FileManage/CreateDynamicFile"
	FileManage_Mkdir_FullMethodName             = "/pb.FileManage/Mkdir"
	FileManage_Remove_FullMethodName            = "/pb.FileManage/Remove"
	FileManage_WriteFile_FullMethodName         = "/pb.FileManage/WriteFile"
	FileManage_ReadFile_FullMethodName          = "/pb.FileManage/ReadFile"
	FileManage_FindMetaData_FullMethodName      = "/pb.FileManage/FindMetaData"
	FileManage_ListChildren_FullMethodName      = "/pb.FileManage/ListChildren"
)

// FileManageClient is the client API for FileManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileManageClient interface {
	CreateFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error)
	CreateDynamicFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error)
	Mkdir(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error)
	Remove(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error)
	WriteFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error)
	ReadFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error)
	FindMetaData(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error)
	ListChildren(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error)
}

type fileManageClient struct {
	cc grpc.ClientConnInterface
}

func NewFileManageClient(cc grpc.ClientConnInterface) FileManageClient {
	return &fileManageClient{cc}
}

func (c *fileManageClient) CreateFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, FileManage_CreateFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManageClient) CreateDynamicFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, FileManage_CreateDynamicFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManageClient) Mkdir(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, FileManage_Mkdir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManageClient) Remove(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, FileManage_Remove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManageClient) WriteFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, FileManage_WriteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManageClient) ReadFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, FileManage_ReadFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManageClient) FindMetaData(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, FileManage_FindMetaData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManageClient) ListChildren(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, FileManage_ListChildren_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileManageServer is the server API for FileManage service.
// All implementations must embed UnimplementedFileManageServer
// for forward compatibility.
type FileManageServer interface {
	CreateFile(context.Context, *FileRequest) (*FileResponse, error)
	CreateDynamicFile(context.Context, *FileRequest) (*FileResponse, error)
	Mkdir(context.Context, *FileRequest) (*FileResponse, error)
	Remove(context.Context, *FileRequest) (*FileResponse, error)
	WriteFile(context.Context, *FileRequest) (*FileResponse, error)
	ReadFile(context.Context, *FileRequest) (*FileResponse, error)
	FindMetaData(context.Context, *FileRequest) (*FileResponse, error)
	ListChildren(context.Context, *FileRequest) (*FileResponse, error)
	mustEmbedUnimplementedFileManageServer()
}

// UnimplementedFileManageServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileManageServer struct{}

func (UnimplementedFileManageServer) CreateFile(context.Context, *FileRequest) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedFileManageServer) CreateDynamicFile(context.Context, *FileRequest) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDynamicFile not implemented")
}
func (UnimplementedFileManageServer) Mkdir(context.Context, *FileRequest) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mkdir not implemented")
}
func (UnimplementedFileManageServer) Remove(context.Context, *FileRequest) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedFileManageServer) WriteFile(context.Context, *FileRequest) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteFile not implemented")
}
func (UnimplementedFileManageServer) ReadFile(context.Context, *FileRequest) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFile not implemented")
}
func (UnimplementedFileManageServer) FindMetaData(context.Context, *FileRequest) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMetaData not implemented")
}
func (UnimplementedFileManageServer) ListChildren(context.Context, *FileRequest) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChildren not implemented")
}
func (UnimplementedFileManageServer) mustEmbedUnimplementedFileManageServer() {}
func (UnimplementedFileManageServer) testEmbeddedByValue()                    {}

// UnsafeFileManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileManageServer will
// result in compilation errors.
type UnsafeFileManageServer interface {
	mustEmbedUnimplementedFileManageServer()
}

func RegisterFileManageServer(s grpc.ServiceRegistrar, srv FileManageServer) {
	// If the following call pancis, it indicates UnimplementedFileManageServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileManage_ServiceDesc, srv)
}

func _FileManage_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManageServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileManage_CreateFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManageServer).CreateFile(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManage_CreateDynamicFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManageServer).CreateDynamicFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileManage_CreateDynamicFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManageServer).CreateDynamicFile(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManage_Mkdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManageServer).Mkdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileManage_Mkdir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManageServer).Mkdir(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManage_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManageServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileManage_Remove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManageServer).Remove(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManage_WriteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManageServer).WriteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileManage_WriteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManageServer).WriteFile(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManage_ReadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManageServer).ReadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileManage_ReadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManageServer).ReadFile(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManage_FindMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManageServer).FindMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileManage_FindMetaData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManageServer).FindMetaData(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManage_ListChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManageServer).ListChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileManage_ListChildren_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManageServer).ListChildren(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileManage_ServiceDesc is the grpc.ServiceDesc for FileManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FileManage",
	HandlerType: (*FileManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFile",
			Handler:    _FileManage_CreateFile_Handler,
		},
		{
			MethodName: "CreateDynamicFile",
			Handler:    _FileManage_CreateDynamicFile_Handler,
		},
		{
			MethodName: "Mkdir",
			Handler:    _FileManage_Mkdir_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _FileManage_Remove_Handler,
		},
		{
			MethodName: "WriteFile",
			Handler:    _FileManage_WriteFile_Handler,
		},
		{
			MethodName: "ReadFile",
			Handler:    _FileManage_ReadFile_Handler,
		},
		{
			MethodName: "FindMetaData",
			Handler:    _FileManage_FindMetaData_Handler,
		},
		{
			MethodName: "ListChildren",
			Handler:    _FileManage_ListChildren_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "filesystem.proto",
}
