// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: procsystem.proto

package procsystem

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProcManage_CreateProc_FullMethodName = "/pb.ProcManage/CreateProc"
	ProcManage_KillProc_FullMethodName   = "/pb.ProcManage/KillProc"
	ProcManage_LitsProc_FullMethodName   = "/pb.ProcManage/LitsProc"
	ProcManage_GetProc_FullMethodName    = "/pb.ProcManage/GetProc"
)

// ProcManageClient is the client API for ProcManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcManageClient interface {
	CreateProc(ctx context.Context, in *ProcRequest, opts ...grpc.CallOption) (*ProcResponse, error)
	KillProc(ctx context.Context, in *ProcRequest, opts ...grpc.CallOption) (*ProcResponse, error)
	LitsProc(ctx context.Context, in *ProcRequest, opts ...grpc.CallOption) (*ProcResponse, error)
	GetProc(ctx context.Context, in *ProcRequest, opts ...grpc.CallOption) (*ProcResponse, error)
}

type procManageClient struct {
	cc grpc.ClientConnInterface
}

func NewProcManageClient(cc grpc.ClientConnInterface) ProcManageClient {
	return &procManageClient{cc}
}

func (c *procManageClient) CreateProc(ctx context.Context, in *ProcRequest, opts ...grpc.CallOption) (*ProcResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcResponse)
	err := c.cc.Invoke(ctx, ProcManage_CreateProc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *procManageClient) KillProc(ctx context.Context, in *ProcRequest, opts ...grpc.CallOption) (*ProcResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcResponse)
	err := c.cc.Invoke(ctx, ProcManage_KillProc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *procManageClient) LitsProc(ctx context.Context, in *ProcRequest, opts ...grpc.CallOption) (*ProcResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcResponse)
	err := c.cc.Invoke(ctx, ProcManage_LitsProc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *procManageClient) GetProc(ctx context.Context, in *ProcRequest, opts ...grpc.CallOption) (*ProcResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcResponse)
	err := c.cc.Invoke(ctx, ProcManage_GetProc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProcManageServer is the server API for ProcManage service.
// All implementations must embed UnimplementedProcManageServer
// for forward compatibility.
type ProcManageServer interface {
	CreateProc(context.Context, *ProcRequest) (*ProcResponse, error)
	KillProc(context.Context, *ProcRequest) (*ProcResponse, error)
	LitsProc(context.Context, *ProcRequest) (*ProcResponse, error)
	GetProc(context.Context, *ProcRequest) (*ProcResponse, error)
	mustEmbedUnimplementedProcManageServer()
}

// UnimplementedProcManageServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProcManageServer struct{}

func (UnimplementedProcManageServer) CreateProc(context.Context, *ProcRequest) (*ProcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProc not implemented")
}
func (UnimplementedProcManageServer) KillProc(context.Context, *ProcRequest) (*ProcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillProc not implemented")
}
func (UnimplementedProcManageServer) LitsProc(context.Context, *ProcRequest) (*ProcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LitsProc not implemented")
}
func (UnimplementedProcManageServer) GetProc(context.Context, *ProcRequest) (*ProcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProc not implemented")
}
func (UnimplementedProcManageServer) mustEmbedUnimplementedProcManageServer() {}
func (UnimplementedProcManageServer) testEmbeddedByValue()                    {}

// UnsafeProcManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcManageServer will
// result in compilation errors.
type UnsafeProcManageServer interface {
	mustEmbedUnimplementedProcManageServer()
}

func RegisterProcManageServer(s grpc.ServiceRegistrar, srv ProcManageServer) {
	// If the following call pancis, it indicates UnimplementedProcManageServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProcManage_ServiceDesc, srv)
}

func _ProcManage_CreateProc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcManageServer).CreateProc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcManage_CreateProc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcManageServer).CreateProc(ctx, req.(*ProcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcManage_KillProc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcManageServer).KillProc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcManage_KillProc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcManageServer).KillProc(ctx, req.(*ProcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcManage_LitsProc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcManageServer).LitsProc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcManage_LitsProc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcManageServer).LitsProc(ctx, req.(*ProcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcManage_GetProc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcManageServer).GetProc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcManage_GetProc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcManageServer).GetProc(ctx, req.(*ProcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProcManage_ServiceDesc is the grpc.ServiceDesc for ProcManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProcManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ProcManage",
	HandlerType: (*ProcManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProc",
			Handler:    _ProcManage_CreateProc_Handler,
		},
		{
			MethodName: "KillProc",
			Handler:    _ProcManage_KillProc_Handler,
		},
		{
			MethodName: "LitsProc",
			Handler:    _ProcManage_LitsProc_Handler,
		},
		{
			MethodName: "GetProc",
			Handler:    _ProcManage_GetProc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "procsystem.proto",
}
