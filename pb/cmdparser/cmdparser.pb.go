// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: cmdparser.proto

package cmdparser

import (
	common "github.com/BBitQNull/SSHoneyNet/pb/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CmdParserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cmd           string                 `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Sessionid     string                 `protobuf:"bytes,2,opt,name=sessionid,proto3" json:"sessionid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CmdParserRequest) Reset() {
	*x = CmdParserRequest{}
	mi := &file_cmdparser_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CmdParserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdParserRequest) ProtoMessage() {}

func (x *CmdParserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmdparser_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdParserRequest.ProtoReflect.Descriptor instead.
func (*CmdParserRequest) Descriptor() ([]byte, []int) {
	return file_cmdparser_proto_rawDescGZIP(), []int{0}
}

func (x *CmdParserRequest) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

func (x *CmdParserRequest) GetSessionid() string {
	if x != nil {
		return x.Sessionid
	}
	return ""
}

type CmdParserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ast           *common.Script         `protobuf:"bytes,1,opt,name=ast,proto3" json:"ast,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CmdParserResponse) Reset() {
	*x = CmdParserResponse{}
	mi := &file_cmdparser_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CmdParserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdParserResponse) ProtoMessage() {}

func (x *CmdParserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmdparser_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdParserResponse.ProtoReflect.Descriptor instead.
func (*CmdParserResponse) Descriptor() ([]byte, []int) {
	return file_cmdparser_proto_rawDescGZIP(), []int{1}
}

func (x *CmdParserResponse) GetAst() *common.Script {
	if x != nil {
		return x.Ast
	}
	return nil
}

var File_cmdparser_proto protoreflect.FileDescriptor

const file_cmdparser_proto_rawDesc = "" +
	"\n" +
	"\x0fcmdparser.proto\x12\x02pb\x1a\fcommon.proto\"B\n" +
	"\x10CmdParserRequest\x12\x10\n" +
	"\x03cmd\x18\x01 \x01(\tR\x03cmd\x12\x1c\n" +
	"\tsessionid\x18\x02 \x01(\tR\tsessionid\"1\n" +
	"\x11CmdParserResponse\x12\x1c\n" +
	"\x03ast\x18\x01 \x01(\v2\n" +
	".pb.ScriptR\x03ast2K\n" +
	"\tCmdParser\x12>\n" +
	"\rCommandParser\x12\x14.pb.CmdParserRequest\x1a\x15.pb.CmdParserResponse\"\x00B.Z,github.com/BBitQNull/SSHoneyNet/pb/cmdparserb\x06proto3"

var (
	file_cmdparser_proto_rawDescOnce sync.Once
	file_cmdparser_proto_rawDescData []byte
)

func file_cmdparser_proto_rawDescGZIP() []byte {
	file_cmdparser_proto_rawDescOnce.Do(func() {
		file_cmdparser_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cmdparser_proto_rawDesc), len(file_cmdparser_proto_rawDesc)))
	})
	return file_cmdparser_proto_rawDescData
}

var file_cmdparser_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_cmdparser_proto_goTypes = []any{
	(*CmdParserRequest)(nil),  // 0: pb.CmdParserRequest
	(*CmdParserResponse)(nil), // 1: pb.CmdParserResponse
	(*common.Script)(nil),     // 2: pb.Script
}
var file_cmdparser_proto_depIdxs = []int32{
	2, // 0: pb.CmdParserResponse.ast:type_name -> pb.Script
	0, // 1: pb.CmdParser.CommandParser:input_type -> pb.CmdParserRequest
	1, // 2: pb.CmdParser.CommandParser:output_type -> pb.CmdParserResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_cmdparser_proto_init() }
func file_cmdparser_proto_init() {
	if File_cmdparser_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cmdparser_proto_rawDesc), len(file_cmdparser_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cmdparser_proto_goTypes,
		DependencyIndexes: file_cmdparser_proto_depIdxs,
		MessageInfos:      file_cmdparser_proto_msgTypes,
	}.Build()
	File_cmdparser_proto = out.File
	file_cmdparser_proto_goTypes = nil
	file_cmdparser_proto_depIdxs = nil
}
